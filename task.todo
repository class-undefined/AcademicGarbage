server:
    ✔ 路由验证守卫 auth_guard @done(22-12-02 22:10)
    ✔ 用户验证守卫 user_auth_guard @done(22-12-02 22:10)
    ✔ 登录接口 @done(22-12-02 22:10)
    ✔ 注册接口 @started(22-12-02 22:10) @done(22-12-02 23:00) @lasted(50m57s)
    ✔ 历史记录查询 @started(22-12-02 23:01) @done(22-12-02 23:07) @lasted(6m38s)
    ✔ 自定义异常处理 @started(22-12-02 22:17) @done(22-12-02 22:35) @lasted(18m14s)
    ✔ 路由装饰器-异常拦截器 interceptor @started(22-12-02 22:36) @done(22-12-02 22:44) @lasted(8m24s)
    ✔ 添加图片接口 @started(22-12-02 23:26) @done(22-12-02 23:38) @lasted(12m37s)
    ✔ 用户名唯一性检测 @started(22-12-02 23:58) @done(22-12-03 00:05) @lasted(7m30s)
    ✔ oss管理操作 @started(22-12-03 00:15) @done(22-12-03 01:04) @lasted(49m22s)
    ✔ websocket 通信 @done(22-12-03 13:32)
    ✔ 引入redis, 用户储存用户sid, 方便通信; 后续考虑用来缓存用户数据 @started(22-12-03 13:32) @done(22-12-03 18:00) @lasted(4h28m33s)
        ✔ 支持自动类型转换 @done(22-12-03 14:28)
        ✔ 支持序列化, 反序列化数据 @done(22-12-03 14:28)
        ✘ 支持装饰器缓存数据 @cancelled(22-12-03 18:00)
    ✔ 图片上传 @done(22-12-11 23:50)
    ✔ 引入ray进行分布式操作 @done(22-12-15 20:17)
    ✔ 编写中转路由, 便于分布式系统识别完毕图片后将消息通知给flask, 再由flask通过websocket转发给用户 @started(22-12-15 20:18) @done(22-12-15 21:02) @lasted(44m23s)


client:
    ✔ 项目结构搭建 @started(22-12-03 15:22) @done(22-12-03 15:41) @lasted(19m40s)
    ✔ 编写登录 @started(22-12-03 15:42) @done(22-12-03 17:59) @lasted(2h17m59s)
    ✔ 封装Request api @started(22-12-03 15:45) @done(22-12-03 15:58) @lasted(13m17s)
    ✔ 用户状态管理 - 全局状态管理 @done(22-12-03 16:16)
    ✔ 导航页 @started(22-12-03 18:01) @done(22-12-03 19:16) @lasted(1h15m20s)
    ✔ 封装Layout @started(22-12-03 18:05) @done(22-12-03 19:16) @lasted(1h11m18s)
    ✘ 实现调用摄像头拍照 @cancelled(22-12-03 22:29) 无需外部调用摄像头, 使用自带文件管理系统即可
    ✔ 图片上传 @done(22-12-11 23:50)
    ✔ 前端引入socket @done(22-12-14 20:55)
    ✔ socket自定义事件类型体操 @done(22-12-14 20:55)
